# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/dma/xilinx/xlnx,v-scd.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Xilinx Scene Change Detection IP.

maintainers:
  - Kunal Rane <kunal.rane@amd.com>

description: |
 The Xilinx Scene Change Detection IP contains two blocks, one IP block is used
 for reading video frame data from memory to the device and the other IP block
 is used for determining whether there is a scene change between current and the
 previous frame. The IP supports YUV planar and semi-planar formats. IP only
 needs luma frame to determine the scene change event. The IP supports memory
 based model, which means that it will accept a dma buffer address and perform
 MEM2DEV transfer followed by statistical based image processing and give the
 data back to application if scene change detection is present or not.

 Another version of scene change detection IP which supports streaming model,
 which means that IP can be inserted in a capture pipeline. For example,
 "hdmirx -> streaming-scd -> fb_wr" is a typical capture pipeline where
 streaming SCD can be embedded. The IP accespts the AXI video data and perform
 histogram based statistical analysis to detect scene change. The IP supports
 single channel.

properties:
  "#dma-cells":
    const: 1
    description: |
      The cell is the DMA channel ID.

  "#address-cells":
   const: 1

  "#size-cells":
   const: 0

  compatible:
    enum:
      - xlnx,v-scd

  reg:
    maxItems: 1

  clocks:
    description: Reference to the AXI Streaming clock.
    maxItems: 1

  clock-names:
    items:
      - const: ap_clk

  interrupts:
    maxItems: 1

  reset-gpios:
    maxItems: 1
    description: Should contain GPIO reset phandle

  xlnx,addrwidth:
    description: Size of dma address pointer in IP
    $ref: /schemas/types.yaml#/definitions/uint8
    enum: [ 32, 64 ]

  xlnx,max-height:
    $ref: /schemas/types.yaml#/definitions/uint16
    description: Maximum number of lines.
    minimum: 64
    maximum: 8640

  xlnx,max-width:
    $ref: /schemas/types.yaml#/definitions/uint16
    description: Maximum number pixels in a line.
    minimum: 64
    maximum: 15360

  xlnx,memorybased:
    type: boolean
    description: This is to differentiate between memory based and
      streaming based IP. The value is 1 for memory based 
      and 0 for streaming based IPs.

  xlnx,numstreams:
    $ref: /schemas/types.yaml#/definitions/uint8
    description: Maximum active streams IP can support is 8
      and this is based on the design.
    minimum: 1
    maximum: 8

  patternProperties:
    'subdev@[0-7]':
    type: object

    properties:
      port@0:
        type: object
        description: |
          Input/sink port node, describing module connected
          to the Input of SCD IP.

        properties:
          reg:
            description: |
              Input/sink port number.
            const: 0
 
          endpoint:
            type: object

            properties:
              remote-endpoint: true

            required:
              - remote-endpoint

            additionalProperties: false

        required:
          -  reg
          -  endpoint

        additionalProperties: false

required:
  -  compatible
  -  reg
  -  interrupts
  -  clocks
  -  reset-gpios
  -  xlnx,memorybased
  -  xlnx,numstreams
  -  xlnx,addrwidth
  -  "#dma-cells"
  -  "#size-cells"
  -  "#address-cells"
  -  subdev

additionalProperties: false

examples:
  - |

    #include <dt-bindings/gpio/gpio.h>
    v_scenechange_0: v_scenechange@a02e0000 {
        #address-cells = <1>;
        #dma-cells = <1>;
        #size-cells = <0>;
        clock-names = "ap_clk";
        clocks = <&misc_clk_0>;
        compatible = "xlnx,v-scd";
        interrupt-names = "interrupt";
        interrupt-parent = <&gic>;
        interrupts = <0 109 4>;
        reg = <0xa02e0000 0x10000>;
        reset-gpios = <&gpio 168 1>;
        xlnx,addrwidth = /bits/ 8 <32>;
        xlnx,max-data-width = <8>;
        xlnx,memorybased;
        xlnx,numstreams = /bits/ 8 <8>;
        subdev@0 {
            port_0: port@0 {
                reg = <0>;
                scd_in0: endpoint {
                    remote-endpoint = <&vcap0_out0>;
                };
            };
        };
        subdev@1 {
            port_1: port@0 {
                reg = <0>;
                scd_in1: endpoint {
                    remote-endpoint = <&vcap0_out1>;
                };
            };
        };
        subdev@2 {
            port_2: port@0 {
                reg = <0>;
                scd_in2: endpoint {
                remote-endpoint = <&vcap0_out2>;
                };
            };
        };
        subdev@3 {
            port_3: port@0 {
                reg = <0>;
                scd_in3: endpoint {
                remote-endpoint = <&vcap0_out3>;
                };
            };
        };
        subdev@4 {
            port_4: port@0 {
                reg = <0>;
                scd_in4: endpoint {
                remote-endpoint = <&vcap0_out4>;
                };
            };
        };
        subdev@5 {
            port_5: port@0 {
                reg = <0>;
                scd_in5: endpoint {
                remote-endpoint = <&vcap0_out5>;
                };
            };
        };
        subdev@6 {
            port_6: port@0 {
                reg = <0>;
                scd_in6: endpoint {
                remote-endpoint = <&vcap0_out6>;
                };
            };
        };
        subdev@7 { 
            port_7: port@0 {
                reg = <0>;
                scd_in7: endpoint {
                remote-endpoint = <&vcap0_out7>;
                };
            };
        };
    };
